# -*- coding: utf-8 -*-

import fitr
import numpy as np
import scipy

# Test that Param object can be instantiated appropriately
def test_paramobj():
	par = fitr.rlparams.Param(name='Testname', rng='unit')
	assert(par.name == 'Testname')
	assert(par.rng == 'unit')
	assert(par.dist is None)

# Test that other parameters sample appropriately
def test_paramsampling():
	lr = fitr.rlparams.LearningRate()
	rs = fitr.rlparams.RewardSensitivity()
	et = fitr.rlparams.EligibilityTrace()
	w = fitr.rlparams.MBMF_Balance()
	cr = fitr.rlparams.ChoiceRandomness()
	ps = fitr.rlparams.Perseveration()

	nsubj = 10
	assert(np.size(lr.sample(size=nsubj)) == nsubj)
	assert(np.size(rs.sample(size=nsubj)) == nsubj)
	assert(np.size(et.sample(size=nsubj)) == nsubj)
	assert(np.size(w.sample(size=nsubj)) == nsubj)
	assert(np.size(cr.sample(size=nsubj)) == nsubj)
	assert(np.size(ps.sample(size=nsubj)) == nsubj)


# Test that group can be generated by checking dimension of output array
def test_groupgenerator():
	lr = fitr.rlparams.LearningRate()
	rs = fitr.rlparams.RewardSensitivity()
	_temp = fitr.rlparams.generate_group(params=[lr, rs], nsubjects=10)
	assert(np.shape(_temp)[0] == 10)
	assert(np.shape(_temp)[1] == 2)
